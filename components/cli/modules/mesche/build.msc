(define-module (mesche build)
  (import (mesche fs)
          (mesche io)
          (mesche list)
          (mesche process)
          (mesche string)
          (mesche project)))

;;; Records

(define-record-type build-output
  (fields type                    ; The output type symbol: object, static-lib
          files                   ; The output files from the build step
          c-flags                 ; C compiler flags and libraries to pass along
          c-libs))

;;; Utilities

(define (same-config-as-current config) :export
  (project-config-name config))

(define (gather-object-files outputs)
  (let next-output ((outputs outputs)
                    (object-files '()))
    (if (pair? outputs)
        (next-output (cdr outputs)
                     (if (build-output-files (car outputs))
                         (append object-files
                                 (build-output-files (car outputs)))
                         object-files))
        object-files)))

;;; Logging

(define debug #f)
(define (debug-log str)
  (if debug
      (begin
        (display "[DBG] ")
        (display str)
        (display "\n"))))

;;; Build Context

(define (context-get context entry-name key) :export
  (let ((entry-plist (assq entry-name context)))
    (if entry-plist
        (plist-ref (cdr entry-plist) key)
        #f)))

(define (context-set context entry-name key value) :export
  (let ((entry-plist (assq entry-name context)))
    (if entry-plist
        (map (lambda (entry)
               (if (equal? (car entry) entry-name)
                   ;; When we find the entry, update its plist
                   (cons (car entry)
                         (plist-set (cdr entry) key value))
                   entry))
             context)
        ;; Append the new entry to the context
        (cons (list entry-name key value)
              context))))

(define (context-set-many context entry-name key-values)
  (let loop ((context context)
             (rest key-values))
    (if (pair? rest)
        (loop (context-set context
                           entry-name
                           (car rest)
                           (cadr rest))
              (cdr (cdr rest)))
        context)))

(define (default-combiner previous next)
  (if (equal? previous #f)
      next
      (if (string? previous)
          ;; TODO: More robust behavior
          (string-append previous
                         (if (string? next)
                             (string-append " " next)
                             ""))
          ;; TODO: Error
          (display "DON'T KNOW HOW TO COMBINE"))))

(define (from-context entry-name key . args) :export
  (let ((combiner (or (plist-ref args :combiner)
                      default-combiner))
        (default-value (plist-ref args :default)))
    (lambda (project task context)
      (let loop ((value default-value)
                 (rest (if (pair? entry-name)
                           entry-name
                           (list entry-name))))
        (if (pair? rest)
            (loop (combiner value (context-get context (car rest) key))
                  (cdr rest))
            value)))))

(define (default-collector previous next)
  (append (if previous
              (if (pair? previous)
                  previous
                  (list previous)))
          (if next
              (if (pair? next)
                  next
                  (list next)))))

(define (collect entry-pairs . args) :export
  (let ((collector (or (plist-ref args :collector)
                      default-collector)))
    (lambda (project task context)
      (let loop ((value #f)
                 (rest entry-pairs))
        (if (pair? rest)
            (loop (collector value (context-get context
                                                (car (car rest))
                                                (cadr (car rest))))
                  (cdr rest))
            value)))))

(define (resolve-value value project task context)
  (if (function? value)
      (value project task context)
      value))

(define (resolve-values key-values project task context)
  (map (lambda (item)
         (if (not (keyword? item))
             (resolve-value item project task context)
             item))
       key-values))

(define (provide-context . args) :export
  (lambda (project task context)
    (context-set-many context
                      (project-task-name task)
                      (resolve-values args project task context))))

(define (finalize-step step-name . args) :export
  (lambda (project task context)
    (let ((entry-name (string->symbol
                       (string-append (symbol->string (project-task-name task))
                                      "/"
                                      (symbol->string step-name)))))
      (context-set-many context
                        entry-name
                        (resolve-values args project task context)))))

(define (resolve-arg key args project task context)
  (let ((arg (plist-ref args key)))
    (if (function? arg)
        (arg project task context)
        arg)))

;;; Dependency Management

(define (dep-path dep)
  (string-append "./deps/" (project-dep-path dep)))

(define (git-clone repo-url local-path) :export
  (process-start-sync (string-append "git clone "
                                     repo-url
                                     " "
                                     local-path)
                      :stderr 'inherit))

(define (download-url url local-path) :export
  (display (string-append "Downloading URL: " url " to " local-path "...\n"))
  (process-start-sync (string-append "wget "
                                     url
                                     " -q -O "
                                     local-path)
                      :stderr 'inherit))

(define (unpack-tar-gz archive-path output-path) :export
  (process-start-sync (string-append "tar -zxf "
                                     archive-path
                                     " -C "
                                     output-path)
                      :stdout 'inherit
                      :stderr 'inherit))

(define (download-musl dep) :export
  ;; TODO: Parameterize this
  (let ((build "x86_64-linux-musl-native")
        (local-path (dep-path dep)))
    ;; TODO: Don't hardcode deps path
    (download-url (string-append "https://musl.cc/" build ".tgz")
                  "./deps/musl.tar.gz")
    (unpack-tar-gz "./deps/musl.tar.gz" "./deps")
    ;; TODO: Library functions for this
    (process-start-sync (string-append "mv " (path-resolve (string-append "./deps/" build)) " " local-path)
                        :stderr 'inherit)
    (process-start-sync "rm ./deps/musl.tar.gz"
                        :stderr 'inherit)))

(define (musl-gcc config deps outputs) :export
  ;; TODO: Generate this from the dep info
  (display "musl-gcc"))

(define (musl-toolchain-fetcher musl-version)
  (lambda (project dep)
    (download-musl dep)))

(define (musl-toolchain-updater musl-version)
  (lambda (config)
    (display "Update musl!\n")))

(define (musl-toolchain . args) :export
  (let ((version (plist-ref args :version)))
    (make-project-dep :name "musl toolchain: latest"
                      :kind 'musl
                      :path "musl"
                      :fetcher (musl-toolchain-fetcher version)
                      :updater (musl-toolchain-updater version))))

(define (mesche-lib-fetcher repo)
  (lambda (project dep)
    (let ((local-path (dep-path dep)))
      ;; TODO: Support other providers or detect "absolute" URL
      (git-clone repo local-path))))

(define (mesche-lib-updater repo)
  (lambda (config)
    (display "TODO: Update Mesche lib!\n")))

(define (mesche-lib name . args) :export
  (let ((repo (plist-ref args :repo))
        (local-path (plist-ref args :local-path)))
    ;; TODO: Use overrides
    (let ((full-repo (string-append "https://github.com/" name)))
      (make-project-dep :name (string-append "mesche-lib " name)
                        :kind 'mesche-lib
                        :path name
                        :fetcher (mesche-lib-fetcher full-repo)
                        :updater (mesche-lib-updater full-repo)))))

(define (pkg-config name . args) :export
  (let ((exclude-cflags (plist-ref args :exclude-cflags))
        (exclude-libs (plist-ref args :exclude-libs)))
    (let ((process (process-start-sync (string-append "pkg-config "
                                                      name
                                                      (if exclude-cflags "" " --cflags")
                                                      (if exclude-libs "" " --libs"))
                                       :stderr 'inherit)))
      ;; TODO: Throw error if library not found?
      (if (equal? (process-exit-code process) 0)
          (read-all-text (process-stdout process))
          ""))))

(define (ensure-deps project)
  (if (project-deps project)
      (begin
        (path-ensure "./deps")
        (let next-dep ((deps (project-deps project)))
          (if (pair? deps)
              (let ((dep-local-path (dep-path (car deps))))
                (if (not (path-exists? dep-local-path))
                    (begin
                      (display (string-append "Fetching dependency: " (project-dep-name (car deps)) "\n"))
                      ((project-dep-fetcher (car deps)) project (car deps))))
                (next-dep (cdr deps))))))))

;;; Tasks

(define (run-task project task context)
  ;; Run the function for the task populating
  ((project-task-runs task) project task context))

(define (build-task task-name) :export
  (lambda (project task context)
    (let ((task (project-find-task project task-name)))
      ;; TODO: Throw error if task isn't found
      (if task
          (run-task project task context)
          (begin
            (display "Could not find task '")
            (display task-name)
            (display  "'!\n"))))))

;;; Build Functions

(define (apply-step-output output project task context)
  (if (function? output)
      (output project task context)
      (if (pair? output)
          output
          ;; TODO: Raise error
          (begin
            (display "INVALID OUTPUT!\n")
            context))))

(define (steps . step-functions) :export
  (lambda (project task context)
    (let next-step ((step-functions step-functions)
                    (context context))
      ;; (display "\nSTEP CONTEXT: ")
      ;; (display context)
      ;; (display "\n")
      (if (pair? step-functions)
          (next-step (cdr step-functions)
                     ;; This executes the step function and
                     (apply-step-output ((car step-functions) project task context)
                                        project
                                        task
                                        context))
          ;; Return the last step's output
          ;; TODO: Remove 'current entry?
          context))))

(define (build-project-inner project-path task-name config-name context)
  (let ((working-path (file-directory (path-resolve project-path)))
        (resolved-project-path (path-resolve project-path))
        (original-path (process-directory))
        (project #f))

    ;; Set the working directory temporarily
    (process-directory-set! working-path)

    ;; Load the project after setting working directory to ensure that any
    ;; inline path resolutions are based on the project path
    (set! project (project-load resolved-project-path))

    (if project
        (begin
          ;; Locate the specified task and configuration
          (let ((task (project-find-task project task-name))
                (config (project-find-config project config-name)))
            ;; Use the default task and config if one was not specified
            (if (not task) (set! task (project-default-task project)))
            (if (not config) (set! config (project-default-config project)))

            (display (string-append "*** Building " (project-name project)
                                    ", task " (symbol->string (project-task-name task))
                                    ", config " (if config (project-config-name config) "(none)")
                                    "\n"))

            ;; Ensure project dependencies exist
            (ensure-deps project)

            ;; Run the specified task
            (let ((task-output (run-task project task (context-set-many context 'config config))))
              ;; Restore the original working path
              (process-directory-set! original-path)

              ;; TODO: Overwrite any changes made to the config object by child steps
              ;; TODO: Need a way to replace a context entry

              ;; Return the task's output
              task-output)))
        (begin
          (display "[mesche build] Project path not found: ")
          (display project-path)
          (display "\n")
          #f))))

(define (build-project project-path . args) :export
  (lambda (project task context)
    (let ((task-name (resolve-arg :task args project task context))
          (config-name (resolve-arg :config args project task context)))
      ;; By default, use the name of the current project configuration
      (build-project-inner project-path
                           task-name
                           config-name
                           context))))

(define (compile-source . args) :export
  (let ((source-files (plist-ref args :source-files))
        (src-path (plist-ref args :src-path))
        (mesche-main (plist-ref args :mesche-main)))
    ;; TODO: Use mesche-main to generate a main.c file that invokes it
    (lambda (project task context)
      (let ((out-path (context-get context 'config :output-path))
            (c-compiler (or (resolve-arg :c-compiler args project task context)
                            (context-get context 'config :c-compiler)
                            "gcc"))
            (c-flags (or (resolve-arg :c-flags args project task context)
                         (context-get context 'config :c-flags)
                         ""))
            (c-libs (or (resolve-arg :c-libs args project task context)
                        (context-get context 'config :c-libs)
                        "")))

        (debug-log (string-append "Compilation starting from " (process-directory)))
        (debug-log (string-append "CC: " c-compiler))
        (debug-log (string-append "IN CFLAGS: " c-flags))
        (debug-log (string-append "IN CLIBS: " c-libs))

        (let compile-next ((input-files (or source-files '()))
                           (output-files '()))
          (if (pair? input-files)
              (begin
                (if (equal? "c" (file-extension (car input-files)))
                    (let ((source-file (string-append (or src-path "./src") "/" (car input-files)))
                          (output-file (string-append out-path "/" (file-name (car input-files)) ".o")))

                      ;; Ensure the output path exists
                      ;; TODO: Do this twice because it sometimes fails the first time...
                      (path-ensure (file-directory output-file))
                      (path-ensure (file-directory output-file))

                      ;; Compile the file if the source is newer than the output file
                      (if (>= (file-modified-time source-file)
                              (file-modified-time output-file))
                          (let ((cmd (string-append c-compiler
                                                    " -c "
                                                    source-file
                                                    " -o "
                                                    output-file
                                                    " "
                                                    c-flags)))
                            (display "Compiling: ") (display source-file)
                            (display " to ") (display output-file)
                            (display "...\n")
                            (debug-log (string-append "RUN: " cmd))

                            (process-start-sync cmd :stderr 'inherit)))
                      (set! output-files (cons output-file output-files))))
                (compile-next (cdr input-files) output-files))

              (finalize-step 'compile-source
                             :object-files output-files)))))))

(define (link-program . args) :export
  (lambda (project task context)
    (let ((input-files (resolve-arg :input-files args project task context))
          (program-path (string-append (path-ensure (context-get context 'config :output-path))
                                       "/"
                                       (plist-ref args :name)))
          (c-compiler (or (context-get context 'config :c-compiler) "gcc"))
          (c-flags (or (resolve-arg :c-flags args project task context)
                       (context-get context 'config :c-flags)
                       ""))
          (c-libs (or (resolve-arg :c-libs args project task context)
                      (context-get context 'config :c-libs)
                      "")))

      ;; TODO: Error if no output file is specified
      ;; TODO: Ensure that the previous output came from a compiler

      ;; Run the linker
      (display (string-append "Linking " program-path "\n"))
      (let ((object-files (string-join (if (pair? input-files)
                                           input-files
                                           (list input-files))
                                       " ")))
        (let ((cmd (string-append c-compiler
                                  " -o "
                                  program-path
                                  " "
                                  object-files
                                  " "
                                  c-flags
                                  " "
                                  c-libs)))
          (debug-log (string-append "LINK: " cmd))
          (process-start-sync cmd :stderr 'inherit)))

      ;; Make the file executable
      (process-start-sync (string-append "chmod +x " program-path)
                          :stderr 'inherit)

      ;; Return the build output details
      (finalize-step 'program
                     :program-path program-path))))

(define (create-static-library . args) :export
  (lambda (project task context)
    (let ((input-files (resolve-arg :input-files args project task context))
          (library-name (resolve-arg :library-name args project task context))
          (output-path (string-append (path-ensure (context-get context 'config :output-path))
                                      "/"
                                      (resolve-arg :library-name args project task context))))
      ;; Run the linker
      (display (string-append "Creating static library " library-name "\n"))
      (process-start-sync (string-append "ar rcs "
                                         output-path
                                         " "
                                         (string-join input-files " "))
                          :stderr 'inherit)

      ;; Return the build output details
      (finalize-step 'static-library
                     :library-path output-path))))

;;; CLI Command

(define (build-command) :export
  (let ((args (cdr (cdr (process-arguments))))
        (project-path "./project.msc")
        (task-name #f)
        (config-name #f)
        (output-type #f))

    ;; Process arguments
    (let next-arg ((args args))
      (if (pair? args)
          ;; TODO: This 'if tower' is terrible, add argument handler function
          (if (equal? (car args) "--project")
              (begin (set! project-path (cadr args))
                     (next-arg (cdr (cdr args))))
              (if (equal? (car args) "--config")
                  (begin (set! config-name (cadr args))
                         (next-arg (cdr (cdr args))))
                  ;; The last possibility is that the task name is being specified
                  ;; TODO: Ensure the name doesn't start with --
                  (begin (set! task-name (car args))
                         (next-arg (cdr args)))))))

    ;; Build the specified project
    (build-project-inner project-path task-name config-name '())))
