(define-module (mesche project)
  (import (mesche fs)
          (mesche list)
          (mesche string)))

(define-record-type project-dep
  (fields name
          kind
          path
          fetcher
          updater))

(define-record-type project-task
  (fields name
          description
          default
          runs))

(define-record-type project
  (fields name
          url
          version
          description
          deps
          tasks
          configs))

;; Alias some record constructors for convenience
(define project make-project :export)
(define task make-project-task :export)

(define (config . args) :export
  ;; Return the args directly, they will be passed as initial context for the
  ;; build
  ;; TODO: Verify that name and description are included
  args)

(define (project-config-name config) :export
  (or (plist-ref config :name)
      "(unnamed)"))

(define (project-config-default config) :export
  (plist-ref config :default))

(define (project-config-output-path config) :export
  (plist-ref config :output-path))

(define (project-load project-path) :export
  ;; Load the project file
  ;; TODO: Automatically add 'project.msc' to path if absent
  ;; TODO: Ensure that what we get back is actually a project
  ;; TODO: Don't load the project more than once if already loaded
  ;; Does the specified project file exist?
  (if (path-exists? project-path)
      (load-file (path-resolve project-path))
      #f))

(define (project-find-config project config-name) :export
  ;; TODO: What if configs list is an array?
  (let next-config ((configs (project-configs project)))
    (if (pair? configs)
        (let ((config (car configs)))
          (if (equal? (project-config-name config) config-name)
              config
              (next-config (cdr configs)))))))

(define (project-default-config project) :export
  ;; TODO: What if configs list is an array?
  (let next-config ((last-config #f)
                    (configs (project-configs project)))
    (if (pair? configs)
        (let ((config (car configs)))
          (if (project-config-default config)
              config
              (next-config config (cdr configs))))
        ;; If we've reached the end of the list, return the last item
        ;; TODO: Throw error if no default set?
        (if last-config
            last-config
            (config :name "(none)")))))

(define (project-find-task project task-name) :export
  ;; TODO: What if tasks list is an array?
  (let next-task ((tasks (project-tasks project)))
    (if (pair? tasks)
        (let ((task (car tasks)))
          (if (equal? (project-task-name task) task-name)
              task
              (next-task (cdr tasks)))))))

(define (project-default-task project) :export
  ;; TODO: What if tasks list is an array?
  (let next-task ((last-task #f)
                    (tasks (project-tasks project)))
    (if (pair? tasks)
        (let ((task (car tasks)))
          (if (project-task-default task)
              task
              (next-task task (cdr tasks))))
        ;; If we've reached the end of the list, return the last item
        ;; TODO: Throw error if no default set?
        last-task)))
