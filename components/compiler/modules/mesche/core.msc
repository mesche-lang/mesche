(define-module (mesche core))

;; The challenge of this module is only depending on things defined inside of
;; itself!  It gets loaded before any other module in the system so it must be
;; self-contained.

(define (null? obj)
  (eqv? obj '()))

(define (cadr obj)
  (car (cdr obj)))

(define (caddr obj)
  (car (cdr (cdr obj))))

(define (length list)
  (let loop ((remaining list)
             (count 0))
    (if (pair? remaining)
        (loop (cdr remaining)
              (+ count 1))
        count)))

(define (memq object list)
  (let loop ((rest list))
    (if (pair? rest)
        ;; TODO: Use eq? when it exists
        (if (eqv? object (car rest))
            (cdr rest)
            (loop (cdr rest))))))

(define (memp test list)
  (let loop ((rest list))
    (if (pair? rest)
        (if (test (car rest))
            rest
            (loop (cdr rest))))))

(define (assq key alist)
  (let loop ((rest alist))
    (if (pair? rest)
        (if (pair? (car rest))
            (if (eqv? key (car (car rest)))
                (car rest)
                (loop (cdr rest)))))))

(define (foldr combine-func items)
  (let loop ((remaining items)
             (result '()))
    (if (pair? remaining)
        (loop (cdr remaining)
              (combine-func (car remaining)
                            result))
        result)))

(define (map func items)
  (foldr (lambda (item result)
           ;; TODO: This could be made more efficient
           (append result
                   (list (func item))))
         items))

(define (map-index func items)
  (let ((index -1))
    (foldr (lambda (item result)
             ;; TODO: This could be made more efficient
             (set! index (+ index 1))
             (append result
                     (list (func item index))))
           items)))

(define (filter func items)
  (foldr (lambda (item result)
           (if (func item)
               ;; TODO: This could be made more efficient
               (append result
                       (list item))
               result))
         items))

(define (reverse items)
  (foldr (lambda (item result)
           (cons item result))
         items))

(define (plist-ref plist key) :export
  (let loop ((remaining plist))
    (if (pair? remaining)
        (if (eqv? (car remaining) key)
            (car (cdr remaining))
            (loop (cdr remaining)))
        #f)))

(define (plist-set plist key value) :export
  (let loop ((new-plist '())
             (remaining plist))
    (if (pair? remaining)
        (if (eqv? (car remaining) key)
            ;; Add the updated key and value to the new list and reverse it,
            ;; appending the remaining items
            (append (reverse (cons value
                                   (cons (car remaining)
                                         new-plist)))
                    ;; Remove the key and value before appending
                    (cdr (cdr remaining)))
            (loop (cons (car remaining) new-plist)
                  (cdr remaining)))
        ;; If we reach this point, append the key to the front of the plist
        (cons key (cons value plist)))))

(define (list-ref lst index) :export
  (let loop ((remaining lst)
             (current 0))
    (if (null? remaining)
        ;; TODO: Use error!
        (display "Argument out of range.")
        (if (< current index)
            (loop (cdr remaining)
                  (+ current 1))
            remaining))))

(define (delete item lst)
  (let loop ((items lst)
             (new-items '()))
    (if (null? items)
        new-items
        (if (equal? item (car items))
            (if (null? (cdr items))
                new-items
                (cons new-items (cdr items)))
            (loop (cdr items)
                  (append new-items
                          (list (car items))))))))

;; TODO: Implement merge sort!
(define (sort items compare-fn)
  items)

(define (array->list array)
  (let loop ((i (- (array-length array) 1))
             (result '()))
    (if (< i 0)
        result
        (loop (- i 1)
              (cons (array-nth array i) result)))))

;; Import the expander module to continue defining core syntaxes
;; (module-import (mesche expander))
